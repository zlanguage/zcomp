def makePatTester: func(type) func(pat) =(typeOf(pat), "<|".concat(type, "|>"))
def isWildcard: makePatTester("wildcard")
def isArr: makePatTester("arr")
def isRest: makePatTester("rest")
def isType: makePatTester("type")
def isObj: makePatTester("obj")
def isProp: makePatTester("prop")
def isRange: makePatTester("range")
def isExtractor: makePatTester("extractor")
def isPredicate: makePatTester("predicate")
def pat=: func(val, pat) {
    if isWildcard(pat) {
        return true
    } else if isArr(pat) {
        if not(Array.isArray(val)){
            return false
        }
        return pat.parts.every(func (patpart, index) {
            if isRest(patpart) {
                return true
            }
            return pat=(val[index], patpart) 
        })
    } else if isType(pat) {
        if =(typeOf(val), pat.typ) {
            return true
        }
        return false
    } else if isObj(pat) {
        if not(isObject(val)) {
            return false
        }
        return pat.props.every(func (prop) {
            if not(isProp(prop)) {
                return false
            }
            return pat=(val[prop.key], prop.value)
        })
    } else if isRange(pat) {
        if both(>=(val, pat.from), <=(val, pat.to)) {
            return true
        }
        return false
    } else if isExtractor(pat) {
        if =(pat.extract(val), undefined) {
            return false
        }
        return true
    } else if isPredicate(pat) {
        return Boolean(pat.test(val))
    }
    return =(val, pat)
}
def gatherWildcards: func(val, pat) {
    let wildcards: []
    if isWildcard(pat) {
        wildcards.push(val)
    } else if isArr(pat) {
        pat.parts.some(func (patpart, index) {
            if isRest(patpart) {
                wildcards.push(val.slice(index))
                return true
            }
            wildcards.push(...gatherWildcards(val[index], patpart))
            return false
        })
    } else if isType(pat) {
        if not(=(pat.str, undefined)) {
            wildcards.push(val)
        }
    } else if isObj(pat) {
        pat.props.forEach(func (prop) {
            wildcards.push(...gatherWildcards(val[prop.key], prop.value))
        })
    } else if isExtractor(pat) {
        wildcards.push(...gatherWildcards(pat.extract(val), pat.pat))
    }
    return wildcards
}
def wildcard: func(str) {
    return [
        "type": func "<|wildcard|>",
        str
    ]
}
def arr: func(...parts){
    return [
        "type": func "<|arr|>",
        parts
    ]
}
def rest: func(str) {
    return [
        "type": func "<|rest|>",
        str
    ]
}

def type: func (typ, str) {
    return [
        "type": func "<|type|>",
        typ,
        str
    ]
}
def obj: func (...props){
    return [
        "type": func "<|obj|>",
        props
    ]
}
def prop: func (key, value) {
    return [
        "type": func "<|prop|>",
        key,
        value
    ]
}
def extractor: func (extract, pat) {
    return [
        "type": func "<|extractor|>",
        "extract": extract.extract,
        pat
    ]
}

def range: func (from, to) {
    return [
        "type": func "<|range|>",
        from,
        to
    ]
}
def predicate: func (pred) {
    return [
        "type": func "<|predicate|>",
        "test": pred
    ]
}
let _matcher: func(pats){
    return func(val){
        let res: undefined
        pats.some(func ((pat, resfunc)) {
            if pat=(val, pat) {
                def wildcards: gatherWildcards(val, pat)
                res: resfunc(...wildcards)
                return true
            }
            return false
        })
        return res
    }
}
_matcher.wildcard: wildcard
_matcher.arr: arr
_matcher.rest: rest
_matcher.prop: prop
_matcher.type: type
_matcher.obj: obj
_matcher.range: range
_matcher.extractor: extractor
_matcher.predicate: predicate

export _matcher