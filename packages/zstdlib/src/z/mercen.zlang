import cheerio
import gr: "./gr"


def primeStore: []
def getMercens: func (ch) {
    def ': cheerio.load(get gr.page("https://www.mersenne.org/primes/"))
    '('("article")[0]).find("table tbody tr").each(func () {
        def tr: '(this)
        def id: tr.attr("id")
        if not(id = undefined) {
            if id.startsWith("row_m") {
                def idx: Number(id.replace("row_m", ""))
                tr.find("td").each(func () {
                    def td: '(this)
                    if td.find("a").length > 0 {
                        def a: '(td.find("a")[0])
                        def href: a.attr("href")
                        if not(href = undefined) {
                            if href.startsWith("digits/") {
                                primeStore[idx]: "https://www.mersenne.org/primes/" ++ href.replace(".zip", ".txt")
                            }
                        }
                    }
                })
            }
        }
    })
    send(primeStore, ch)
}

def primes: func (ch: chan()) {
    def main: func () {
        def primeChan: chan()
        getMercens(primeChan)
        def primeList: get primeChan
        def res: [
            "number": func (num number!, ch: chan()) {
                if num < 0 or num > primeList.length - 1 {
                    def errStr: "There is no " ++ num ++ "st mersenne prime."
                    raise errStr
                }
                def main: func () {
                    if not(primeStore[num].startsWith("http")) {
                        send(primeStore[num], ch)
                        return undefined
                    }
                    def pg: get gr.page(primeList[num])
                    primeStore[num]: pg
                    send(pg, ch)
                }
                main()
                return ch
            },
            "biggest": func () {
                return this.number(primeList.length - 1)
            },
            "count": func () {
                return primeList.length - 1
            }
        ]
        send(res, ch)
    }
    main()
    return ch
}

export primes