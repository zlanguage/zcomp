def _raise: func (msg) {
    raise msg
}
hoist Actor: func (onMessage function!, state: [:]) {
    enter {
        onMessage.length = 3
    }
    let mailbox: []
    let listening: false
    hoist recieve: func (message) {
        mailbox.unshift(message)
    }
    hoist listen: func (whenDone: func () {}){
        enter {
            typeOf(whenDone) = "function"
            whenDone.length = 1
        }
        if not(listening) {
            let lastActorComplete: true
            def done: func(itemsLeft number!) func (newState: [:]) {
                state: newState
                lastActorComplete: true
                if itemsLeft = 0 {
                    whenDone(state)
                }
            }
            setInterval(func () {
                if mailbox.length > 0 and lastActorComplete {
                    lastActorComplete: false
                    onMessage(mailbox.pop(), state, done(mailbox.length))
                }
            }, 0)
        }
    }
    return [
        "type": func "Actor",
        "recieve": recieve,
        listen
    ]
}

hoist send': func (message string!, actor Actor!) {
    actor.recieve(message)
}

hoist sendAll: func (messages array!, actor Actor!) {
    messages.forEach(func (message) {
        actor.recieve(message)
    })
}
hoist |<<: func (actor Actor!, listener: func (_) {}) {
    enter {
        typeOf(listener) = "function"
        listener.length = 1
    }
    actor.listen(listener)
}
hoist |>>: func (messages, actor) { 
    return match messages {
        string! => send(messages, actor),
        array! => sendAll(messages, actor),
        _ => _raise("Invalid messages passed to send function.")
    } 
}

export [
    Actor,
    "send": send',
    sendAll,
    |<<,
    |>>
]