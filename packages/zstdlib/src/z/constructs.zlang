def _if: func (cond) [
    "then": func (res) [
        "_else": func (otherres) {
            if cond {
                return res()
            } else {
                return otherres()
            }
        }
    ]
]
def _loop: func (body) {
    def cancel: Symbol("cancel")
    loop {
        if =(body(cancel), cancel) {
            break
        }
    }
}
def _while: func (cond) func (body) {
    loop {
        if not(cond()) {
            break
        }
        body()
    }
}

def _do: func (body) [
    "_while": func (cond) {
        loop {
            body()
            if not(cond()) {
                break
            }
        }
    }
]

def _for: func (init, cond, step) func (body) {
    let state: match init() {
        array!arr => arr,
        _ => [_]
    }
    loop {
        body(...state)
        state: match step(...state) {
            array!arr => arr,
            _ => [_, ...state.slice(1)]
        }
        if not(cond(...state)) {
            break
        }
    }
}

def _unless: func (cond) [
    "do": func (body) {
        if not(cond) {
            body()
        }
    }
]

def _until: func (cond) func (body) {
    loop {
        if cond() {
            break
        }
        body()
    }
}

def _raise: func (str) {
    raise str
}

def _settle: func (err) {
    settle err
}

def _try: func (body) [
    "_on": func (handler) {
        try {
            body()
        } on err {
            handler(err)
        }
    }
]

export [
    "_if": _if,
    _loop,
    _while,
    _do,
    _for,
    _unless,
    _until,
    _raise,
    _settle,
    _try
]