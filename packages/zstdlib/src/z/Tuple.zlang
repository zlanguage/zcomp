def Tuple: func () {
    def fields: stone(Array.from(arguments))
    if >(fields.length, 4) {
        def err: [
            "You tried to store more than 4 fields in a tuple.",
            "This probably isn't a good idea.",
            "Tuples are an effective way to store immutible and fixed length data.",
            "However, they only make sense for small amounts of data.",
            "A point could be a tuple: (x, y)",
            "So could a color: (r, g, b)",
            "Or even: (r, g, b, a)",
            "However, once you get past small amounts of data, tuples become confusing.",
            "If you want an immutable data structure, look into the stone function and objects."
        ].join("\\n")
        raise err
    }
    let res: [:]
    fields.forEach(func (field, index) {
        res["_".concat(+(index, 1))]: field
    })
    res.length: fields.length
    res.type: func () {
        return "Tuple"
    }
    res.concat: func (tuple) {
        if not(=(typeOf(tuple), "Tuple")) {
            raise "Cannot add tuple to non-tuple."
        }
        if not(=(res.length, tuple.length)) {
            raise "Cannot add tuples of differing lengths."
        }
        if =(tuple.length, 1) {
            return Tuple(+(res._1, tuple._1))
        } else if =(tuple.length, 2) {
            return Tuple(+(res._1, tuple._1), +(res._2, tuple._2))
        } else if =(tuple.length, 3) {
            return Tuple(+(res._1, tuple._1), +(res._2, tuple._2), +(res._3, tuple._3))
        } else {
            return Tuple(+(res._1, tuple._1), +(res._2, tuple._2), +(res._3, tuple._3), +(res._4, tuple._4))
        }
    }
    res.toString: func () {
        return "Tuple(".concat(
            Object.entries(res)
            .filter(func ((k, v)) {
                return k.startsWith("_")
            })
            .map(func ((k, v)) {
                return v
            })
            .join(", ")
        , ")")
    }
    stone(res)
    return res
}

export Tuple

