def Decimal: func (c, e, pure: false) {
    if typeOf(c) = "Decimal" {
        if pure {
            return c
        }
        let newC: c.c
        let newE: c.e
        (newC, newE): normalize(newC, newE)
        return Decimal(newC, newE)
    }
    if e = undefined {
        match c {
            number! => {
                e: 0
                loop {
                    if c % 1 = 0 {
                        break
                    }
                    c: c * 10
                    e: e - 1
                }
                c: BigInt(c)
            },
            string! => {
                (c, e): strToDec(c)
            },
            _ => {
                def toThrow: "" ++ _ ++ " cannot be coerced into a Decimal."
                raise toThrow
            }
        }
    }
    if not(pure) {
        (c, e): normalize(c, e)
    }
    return stone([
        "c": c,
        e,
        "type": func "Decimal",
        "+": func (other) {
            if other = 0 {
                return this
            }
            if this = 0 {
                return Decimal(other)
            }
            other: Decimal(other)
            let newC: c
            let newE: e
            if not(other.e = e) {
                if other.e < e {
                    loop {
                        if other.e = newE {
                            break
                        }
                        newE: newE - 1
                        newC: JS.*(newC, BigInt(10))
                    }
                } else {
                    loop {
                        if other.e = e {
                            break
                        }
                        other: Decimal(JS.*(other.c, BigInt(10)), other.e - 1, true)
                    }
                }
            }
            return Decimal(JS.+(newC, other.c), newE)
        },
        "r+": func (other) {
            other: Decimal(other)
            return other.+(this)
        },
        "-": func (other) {
            other: Decimal(other)
            return this.+(Decimal(JS.-(other.c), other.e))
        },
        "r-": func (other) {
            other: Decimal(other)
            return other.-(this)
        },
        "*": func (other) {
            other: Decimal(other)
            return Decimal(JS.*(c, other.c), e + other.e)
        },
        "r*": func (other) {
            other: Decimal(other)
            return other.*(this)
        },
        "/": func (other, precision: -20) {
            other: Decimal(other)
            let newC: c
            let newE: e
            if newC = 0 {
                return this
            }
            if other.c = 0 {
                return undefined
            }
            newE: newE - other.e
            if newE > precision {
                newC: JS.*(c, JS.**(BigInt(10), BigInt(newE - precision)))
                newE: precision
            }
            newC: JS./(newC, other.c)
            return Decimal(newC, newE)
        },
        "r/": func (other) {
            other: Decimal(other)
            return other./(this)
        },
        "<": func (other) {
            other: Decimal(other)
            return isNegative(this.-(other))
        },
        "r<": func (other) {
            other: Decimal(other)
            return other.<(this)
        },
        "=": func (other) {
            other: Decimal(other)
            return c = other.c and e = other.e
        },
        "r=": func (other) {
            other: Decimal(other)
            return other.=(this)
        },
        "toString": func () {
            def pc: if (JS.<(c, 0)) JS.-(c) else c
            def str: pc.toString()
            def prefix: if (JS.<(c, 0)) "-" else ""
            if e > 0 {
                return prefix ++ str ++ "0".repeat(e - 1)
            } else if e = 0 {
                return prefix ++ str
            } else {
                def insertPlace: str.length + e
                def zeros: if (Math.abs(e) > str.length) "0".repeat(Math.abs(str.length + e)) else ""
                return prefix ++ numfmt(str.slice(0, insertPlace) ++ "." ++ zeros ++ str.slice(insertPlace))
            }
        },
        "toNumber": func () {
            return Number(this.toString())
        },
        "prev": func () {
            return this - 1
        },
        "succ": func () {
            return this + 1
        }
    ])
}

hoist numfmt: func (numstr string!) {
    return numstr.replace(RegExp("^0+"), "").replace(RegExp("(\\\\.\\\\d+?)0+$"), "$1").replace(RegExp("^\\\\."), "0.").replace(RegExp("\\\\.0$"), "")
}

hoist absBig: func (big bigint!) {
    if JS.<(big, 0) {
        return JS.*(big, BigInt(-1))
    }
    return big
}
hoist signBig: func (big bigint!) {
    if JS.>(big, 0) {
        return 1
    } else if JS.==(big, 0) {
        return 0
    } else {
        return -1
    }
}
hoist sign: func (d) {
    d: Decimal(d)
    if JS.>(d.c, 0) {
        return 1
    } else if JS.==(d.c, 0) {
        return 0
    } else {
        return -1
    }
}
hoist normalize: func (c bigint!, e number!) {
    if e > 0 {
        c: JS.*(c, JS.**(BigInt(10), BigInt(e)))
        e: 0
    } else if e < 0 {
        loop {
            if e > 0 or not(JS.==(JS.%(c, BigInt(10)), 0)) {
                break
            }
            c: JS./(c, BigInt(10))
            e: e + 1
        }
    } else if JS.==(c, 0) {
        return (BigInt(0), 0)
    }
    return (c, e)
}
hoist strToDec: func (str string!) {
    if not(str.includes(".") or str.includes("e")) {
        return (BigInt(str), 0)
    } else if str.includes("e") {
        let (c, e): str.split("e")
        e: Number(e)
        if c.includes(".") {
            def (int, dec): c.split(".")
            c: int ++ dec
            e: e - dec.length
        }
        return (BigInt(c), e)
    } else {
        def (int, dec): str.split(".")
        return (BigInt(int ++ dec), dec.length * -1)
    }
}

hoist isNegative: func (dec) {
    dec: Decimal(dec)
    return JS.<(dec.c, 0)
}


Decimal.E:       Decimal("2.71828182845904523536")
Decimal.LN10:    Decimal("2.30258509299404568401")
Decimal.LN2:     Decimal("0.69314718055994530941")
Decimal.LOG10E:  Decimal("0.43429448190325182765")
Decimal.LOG2E:   Decimal("1.44269504088896340736")
Decimal.PI:      Decimal("3.14159265358979323846")
Decimal.SQRT1_2: Decimal("0.70710678118654752440")
Decimal.SQRT2:   Decimal("1.41421356237309504880")

Decimal.abs: func (dec) {
    dec: Decimal(dec)
    if dec < 0 {
        return dec * -1
    }
    return dec
}

Decimal.ceil: func (num) {
    return Decimal.floor(num) + 1
}
Decimal.floor: func (num) {
    return Decimal(Decimal(num).toString().split(".")[0])
}
Decimal.round: func (num) {
    num: Decimal(num)
    if num < Decimal.floor(num) + 0.5 {
        return Decimal.floor(num)
    }
    return Decimal.ceil(num)
}
Decimal.sign: sign

Decimal.random: func () {
    let str: ""
    {} ++ loop (_ <- 1 to 20) str: str ++ Math.random().toString()[2]
    return Decimal("0." ++ str)
}

export Decimal

