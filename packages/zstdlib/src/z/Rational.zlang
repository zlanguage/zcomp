def Rational: func (n, d: 1) {
    if typeOf(n) = "Rational" {
        return n
    }
    if d = 0 {
        raise "A Rational cannot have denominator of 0."
    }
    if typeOf(n) = "string" {
        if n.includes(".") {
            def (int, dec): n.split(".")
            n: BigInt(int ++ dec)
            d: BigInt("1" ++ "0".repeat(dec.length))
        }
    }
    n: BigInt(n)
    d: BigInt(d)
    def gcf: gcd(n, d)
    n: JS./(n, gcf)
    d: JS./(d, gcf)
    return stone([
        "numer": n,
        "denom": d,
        "type": func "Rational",
        "toString": func () {
            return "" ++ n ++ " // " ++ d
        },
        "+": func (other) {
            other: Rational(other)
            return Rational(JS.+(JS.*(other.numer, d), JS.*(n, other.denom)), JS.*(d, other.denom))
        },
        "r+": func (other) {
            other: Rational(other)
            return other.+(this)
        },
        "-": func (other) {
            other: Rational(other)
            return this.+(Rational(JS.*(other.numer, BigInt(-1)), other.denom))
        },
        "r-": func (other) {
            other: Rational(other)
            return other.-(this)
        },
        "*": func (other) {
            other: Rational(other)
            return Rational(JS.*(n, other.numer), JS.*(d, other.denom))
        },
        "r*": func (other) {
            other: Rational(other)
            return other.*(this)
        },
        "/": func (other) {
            other: Rational(other)
            return Rational(JS.*(n, other.denom), JS.*(d, other.numer))
        },
        "r/": func (other) {
            other: Rational(other)
            return other./(this)
        },
        "=": func (other) {
            other: Rational(other)
            return n = other.numer and d = other.denom
        },
        "r=": func (other) {
            other: Rational(other)
            return other.=(this)
        },
        "<": func (other) {
            other: Rational(other)
            return Rational.sign(this.-(other)) = -1
        },
        "r<": func (other) {
            other: Rational(other)
            return other.<(this)
        }
    ])
}

def gcd: func (a bigint!, b bigint!) {
    return
        if (JS.==(b, 0)) a
        else gcd(b, JS.%(a, b))
}
def //: Rational
operator //: 1000

Rational.E:       Rational("2.71828182845904523536")
Rational.LN10:    Rational("2.30258509299404568401")
Rational.LN2:     Rational("0.69314718055994530941")
Rational.LOG10E:  Rational("0.43429448190325182765")
Rational.LOG2E:   Rational("1.44269504088896340736")
Rational.PI:      Rational("3.14159265358979323846")
Rational.SQRT1_2: Rational("0.70710678118654752440")
Rational.SQRT2:   Rational("1.41421356237309504880")

Rational.sign: func (rat) {
    rat: Rational(rat)
    if rat = 0 {
        return 0
    }
    if JS.<(rat.numer, 0) or JS.<(rat.denom, 0) {
        return -1
    }
    return 1
}

Rational.abs: func (rat) {
    rat: Rational(rat)
    if rat < 0 {
        return rat * -1
    }
    return rat
}

Rational.random: func (rat) {
    def bound: Math.floor(Math.random() * 1_000_000)
    def amt: Math.floor(Math.random() * +(bound, 1))
    return amt // bound
}

Rational["$slash$slash"]: //

export Rational